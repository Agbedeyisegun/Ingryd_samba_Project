Linux Server Installation Documentation Prepared By Agbedeyi Segun Olatunde




A. Introduction

	Purpose
        


	 The purpose of the server installation can vary based on the intended use of an organisation. These are a few common scenarios:

    Web Hosting:
        The server installation aims to host and serve web pages, applications, or services over the internet.
        Scenario: Imagine setting up a Linux server to host an e-commerce website where users can browse products, make purchases, and interact with the site's features.

    File Hosting/File Server:
        The server installation is intended to act as a centralized location for storing and sharing files across a network.
        Scenario: Setting up a Linux server to store and manage important documents, media files, or collaborative work among team members within an organization.

    Database Server:
        Installing the server to manage and provide access to databases, facilitating data storage, retrieval, and manipulation.
        Scenario: Deploying a Linux server to handle a company's customer database, allowing employees to access and update customer information securely.

    Application Server:
        Hosting and delivering various software applications or services to end-users or other systems.
        Scenario: Implementing a Linux server to deploy a custom-built application, such as a messaging platform or a project management tool, accessible to users across devices.

    Development/Test Server:
        Providing an environment for software development, testing, and experimentation without affecting production systems.
        Scenario: Creating a Linux server for developers to test new software builds, perform debugging, and simulate real-world usage scenarios before deploying them to live servers.

Each of these purpose influences the server's configuration, software installations, security measures, and maintenance tasks, ensuring it aligns with the specific needs and goals of its intended use.


	Scope

        Scenario: For file hosting, the scope might include limitations on the file types or sizes allowed to ensure efficient storage utilization.

	    File Types and Sizes:
        Example: The scope includes limitations on file types allowed, such as documents (PDF, DOCX), images (JPG, PNG), and videos (MP4, AVI). It might exclude executable files or specific formats deemed unsafe or unnecessary for the server's purpose.
        Explanation: Restricting file types prevents the hosting of potentially harmful files and ensures compatibility and security across the stored data.

    File Size Restrictions:
        Example: The scope may specify a maximum file size for uploads, such as 100MB per file.
        Explanation: Limiting file sizes ensures efficient storage utilization and prevents the server from being overloaded by excessively large files that might impact performance or consume excessive storage space.

    Access Permissions:
        This define user roles and permissions, allowing certain users or groups to upload, download, or modify files while restricting access to sensitive data.
        Explanation: By defining access permissions, the server administrator maintains control over who can perform specific actions, ensuring data security and preventing unauthorized access or modification. This can be done with difference file permission like the normal permission chmod rwx and file attribute permission chattr (sudo chattr +i filename to make the file immutable) lsattr to check permission on a file. meanwhile ls pwd and cd are for dir/file navigation and permission tools.

    Retention Policies:
        The scope outline retention periods for stored files, specifying how long files will be kept before being archived or deleted.
        Explanation: Establishing retention policies helps manage storage capacity, keeping the server organized and preventing unnecessary accumulation of outdated or unused files.

    Backup and Recovery Guidelines:
        This include instructions on regular backups and procedures for file recovery in case of data loss or system failure.
        Explanation: Defining backup strategies and recovery procedures ensures data integrity and minimizes the risk of data loss, providing a safety net in case of unexpected incidents.

Defining such scope for a file hosting server helps maintain order, optimize storage resources, enhance security, and ensure efficient operation aligned with the server's intended purpose.




B. Hardware and Software Requirements



Hardware Specifications:

    CPU:
        Intel Xeon E5-2690 v4 (14 cores, 2.60 GHz)
        Robust CPU with multiple cores and a high clock speed can handle concurrent tasks efficiently, crucial for multitasking or handling heavy computational loads.

    RAM:
        128GB DDR4 ECC RAM
        Ample RAM enables smooth operation and simultaneous handling of multiple processes, ensuring optimal performance and responsiveness.

    Storage:
        RAID-configured 1TB NVMe SSDs
        Utilizing SSDs in a RAID configuration offers fast read/write speeds, enhancing data access and storage performance. RAID ensures data redundancy or improved performance, depending on the chosen setup.

    Network Interface:
        Dual Gigabit Ethernet ports (Intel I210)
        Multiple network interfaces provide redundancy and load balancing capabilities that will ensure uninterrupted network connectivity and efficient data/file transfer.

Software Requirements:

    Linux Distribution:
        Scenario: Ubuntu Server 20.04 LTS
        Get a stable and widely supported Linux distribution like Ubuntu Server LTS ensures long-term support, security updates, and a vast community for troubleshooting and assistance.

    Additional Software:
        Apache HTTP Server
            Installing Apache facilitates web hosting, enabling the server to serve web content and support various web applications or websites.
        Samba file transfer Server
            Deploying Samba allows seamless file sharing between different operating systems (Windows, Linux, macOS) over a network, enhancing collaboration and file accessibility.it is Scalable, Cross-Platform Compatible, Secure, Integrated with Active Directory, Performance, Open Source and Free, Configuration Flexible File and Print Services options. 

Hardware and software choices are demands of specific server functionalities, ensuring optimal performance, scalability, and compatibility with the intended use cases, whether it's web hosting, file sharing, database management, or other server purposes.



C. Installation Process

    Step-by-Step Installation
        Example: Detail the installation steps of the chosen Linux distribution, including selecting language, partitioning disks, and configuring users.

    Configuration Options
        Scenario: Choices like disk partitioning for separating OS and data or configuring static IP address during installation.



Step-by-Step Installation:

    Boot from ISO:
        Insert the bootable installation media (USB/DVD) containing the Linux distribution ISO.
        Restart the server and boot from the installation media.

    Language and Localization:
        Select the preferred language and localization settings for the installation process.

    Installation Type:
        Choose the installation type, such as "Install Ubuntu Server" or similar for other distributions.

    Network Configuration:
        Connect to a network if required for updates or online resources during installation.

    Disk Partitioning:
        Choose the disk/partitioning scheme:
            Scenario 1: Manual Partitioning:
                Select disk(s) and partition sizes.
                Allocate partitions for root (/), swap, and other directories as needed.
            Scenario 2: Guided Partitioning:
                Choose options like "Use entire disk," "Use LVM," or "Use ZFS" for automated partitioning.

    Installation Location and User Setup:
        Specify the installation destination (selected partitions).
        Create the initial user account (username, password) and set up user privileges.

    Software Selection:
        Choose packages or server roles to install (e.g., SSH server, web server, database server) if prompted.

    Grub Boot Loader:
        Install the boot loader (GRUB) to the appropriate disk.

    Finalization and Reboot:
        Review installation settings.
        Complete the installation process and reboot the server.

Configuration Options:

    Disk Partitioning Choices:
        Scenario: Separating OS and Data:
            Allocate partitions specifically for the OS (root /) and separate partitions or mount points for data directories (/home, /var, etc.).
            Example: Assign / to SSD for OS and /data to HDD for data storage.

    Network Settings:
        Scenario: Configuring Static IP Address:
            Choose manual network configuration during installation.
            Input the desired IP address, subnet mask, gateway, and DNS server details.

    Additional Configuration:
        Scenario: Encrypted Filesystem:
            Choose encryption options for heightened security, encrypting specific partitions (e.g., /home) during installation.

These configuration options cater to specific preferences or requirements, allowing administrators to customize the server's setup according to their needs, whether it's optimizing storage, ensuring specific network settings, or enhancing security through encryption.




D. Post-Installation Tasks

    Update and Upgrade
        Example: Guide users through running commands like sudo apt update && sudo apt upgrade for system updates.

    User and Group Management
        Scenario: Creating user accounts (e.g., sudo useradd username, -s for shell, -m for home, -c for comment, -G Sudo is to add the user to Sudoer or a particular group, -p for password; -e for expiring date, -g for custom gid) also subsequent manipulation can be done through usermod, chmod, groupadd. for usermod (sudo usermod -d /new/home/directory username, sudo usermod -aG groupname username) chmod (sudo chmod permission on user, chmod a+rwx, u+rwx, g+rwx and 777 either symbolic or numeric mode) meanwhile each group has read (r), write (w), and execute (x) permissions. Numeric representations assign values to these permissions (4 for read, 2 for write, 1 for execute) and sum them up to determine the permission setting. Groupadd (sudo groupadd [options] group_name, options can be -g, -r)





    Security Measures
        Configuring firewall rules (like sudo ufw enable) and SSH access controls (e.g., disabling root login). This includes allowing SSH to be allowed on a particular customised port, the default port is 22 but it is adviceable to use another port different to the known port in firewall configuration. firewall are  checked form of security measures. ufw allow/status/disallow then options, options are the particular process.

    Network Configuration
        Documenting the setting of IP address (e.g., sudo ifconfig eth0 192.168.1.100) and gateway settings. setting up static ip address and configuring it for file sharing options among all OS and server.

E. System Monitoring and Maintenance

    Logging and Monitoring
        Describing log rotation policies (e.g., setting up logrotate) and monitoring logs with tools like journalctl. which is using journaling file system, journalctl -u [unit]: Shows logs related to a specific systemd unit.

    Backup and Restore Procedures
        Detailing backup strategies like using rsync for regular backups and outlining restoration processes. can use this cmd to backup file (rsync -av source_directory/ destination_directory/) and to access the backup back you have to reverse the cmd to destination first and source dir interchangeably, -a: Archive mode (preserves permissions, ownership, timestamps).-v: Verbose mode (shows details of the process).


F. Troubleshooting

    Common Issues
        Issue Resolution: Troubleshooting dependency errors during software installation is a common occurrence. Using apt --fix-broken install resolves many of these issues by fixing broken dependencies.

    Logs and Diagnostics
        Scenario: Explaining how to access logs (e.g., /var/log/syslog) and interpret them to identify errors or warnings.
    
    File Copy system
	File copy system is one of the best practice to make sure you dont just file without backing it up first so you can check the file along the line if you want to revert to the default setting.
	
    One Changes at a time
	Make sure you do one changes at a time when troubleshooting so you can do proper monitoring and tracking of the error or errors.




II Samba Server Installation Documention



A. Introduction; 
     Samba is a file sharing platform across all OS( Windows, Linux/Unix based OS and MacOS), it is known for his features and it is a highly trusted and widely used solution for enabling file and print services across different operating systems in a networked environment. It's particularly popular due its calability, Cross-Platform Compatibility, Security, Integration with Active Directory, Performance, Open Source and Free, Configuration Flexibility File and Print Services options.

    Purpose: The Samba server will serve as a file sharing platform for the office across all OS, allowing users to access shared files and folders.
    Integration with Linux Server: Samba will be integrated into the existing Linux server infrastructure to provide seamless file sharing capabilities across the office network.

B. Installation and Configuration

    Samba Installation: Document the step-by-step process of installing Samba on the Linux server, including any dependencies required.
        This involves installing the Samba package through the terminal using package managers dpkg or apt 
	---	sudo apt update 		This to get the lastest samba file i want to download  
 	---	sudo apt install samba -y 	to install samba file with flag -y to confirm package manager should do that with all the dependencies.
	---	sudo mkdir /share		This create the file with name of my choice in / directory 
	---	sudo chmod 777 /share		This create permission with numerical mode but we actually need only others permission 
	---	sudo vim /etc/samba/smb.conf	i edit this file with the config that required the samba to work with the below text;

			
[public-docs]
path =/share
pubic = yes
browseable = yes
guest ok = yes
read only = no
create mask = 0777
directory mask = 0777
comment = " this is a public file shared that is allowed everybody to shared all windows and mac and linux OS"

Note: the name of the path should be in bracket and any name can be use.
also if you want specify users but the public will have to be "no" instead of yes, you can put it it like below

valid users = nola, jane, ibile

write = jane, nola 
read = ibile, jane
 
    --- 	testparm 	was used on the tty for it to be permanent

    NOTE; You will get a prompt with all the config you have done and it will confil




    I check the status, start and enable smbd and nmbd demon with the below cmd :


        --- systemctl status smbd.service
        --- systemctl status nmbd.service
        --- systemctl start smbd.service
        --- systemctl start nmbd.service
        --- systemctl enable smbd.service
        --- systemctl enable  nmbd.service


	   

C. User Authentication

    User Accounts: Document the creation and management of user accounts in Samba.
         Creating Samba users with appropriate access privileges for different shared folders.

	--- sudo useradd -s /sbin/nologin tech	This create user called tech and -s is for shell 
 	--- sudo smbpasswd -a tech 		This is used to set password -a is for be added to the local smbpasswd file


	--- sudo systemctl restart smbd.service 	This restart the smbd.service after i change the file 
	--- cd /share/					i enter the file created to create test file inside it.
	--- touch file{1..3}
	--- ls						This check if the file is created 
 	--- zip importantfilezip.zip file1 file2 file3 	This is used to zip the files into 1 file "importantfilezip.zip
"
 


    Integration with Linux Users: Explain how Samba users are synchronized with Linux users.
        Sample: Ensuring that Linux users can seamlessly access the Samba shares using their existing credentials.
	

	On the GUI the user can login with his existing login crendentials to access the samba shared file. with the command below
	--- smb://ipaddress   This will pop the interface to login with the existing credentials

	
D. Security and Access Controls

    Firewall Configuration: Provide instructions on configuring the firewall to allow Samba traffic.
        Sample: Setting up firewall rules to permit Samba communication through specific ports.

	--- sudo ufw status	 		This check the status 
	--- sudo ufw enable			This enable the firewall 
	--- sudo ufw allow 137/tcp		These allow in a specific port with the number is front of them 
	--- sudo ufw allow 138/tcp
	--- sudo ufw allow 139/tcp
	--- sudo ufw allow 445/tcp
	--- sudo ufw allow 137/udp
	--- sudo ufw allow 138/udp    
	--- sudo ufw status			This will check the status if what was configure is set a intended.




    Encryption and Authentication: Document the use of encryption and authentication mechanisms to secure data transmission.
        Enabling encrypted communication between the server and client machines.
	
	This is set in the configuration in the edited file like below: 

	if you want specify users but the public will have to be "no" instead of yes, you can put it it like below

	valid users = nola, jane, ibile

	write = jane, nola
	read = ibile, jane




E. Testing and Verification

1    Access Testing: Outline procedures for testing file and print services to ensure users can access and use the shared folders.
        Checking if users can successfully access, modify, and delete files within their designated folders.

	This is done with the permission set to chmod 777 and the user name and smbpasswd that was setup during the installation. also ip address of the server is also used by the client server to access it. 
	--- smb://serveripaddress 	 This is used on the GUI to access the shared file for the linux with password 
	--- \\serveripaddress		This is run on the Windows OS cmd to access the file with password created 




 2   Error Handling: Provide guidance on common errors and their resolutions.
        Sample: Troubleshooting connection issues, permission errors, or misconfigured settings.


Common Samba Errors and Resolutions:

    Connection Issues:
        Error: Unable to connect to Samba shares from a client machine.
        Resolution:
            Ensure the Samba service is running on the server (sudo systemctl status smbd).
            Check firewall settings to allow Samba traffic through the necessary ports.
            Verify that the client device is on the same network and can access other network resources.
            Double-check the share configuration and permissions in the Samba configuration file (smb.conf).

    Permission Errors:
        Error: Users encounter "Access Denied" or "Permission Denied" when trying to access Samba shares.
        Resolution:
            Review and adjust folder permissions (chmod and chown) for the shared directories.
            Ensure that Samba users have appropriate permissions (smbpasswd -a <username> to add a Samba user).
            Check the smb.conf file for correct read/write permissions and user access settings.

    Misconfigured Settings:
        Error: Samba shares are visible but inaccessible or behave unexpectedly.
        Resolution:
            Verify the syntax and settings in the smb.conf file for typos or mistakes.
            Check for conflicting configurations or duplicate entries within the configuration file.
            Restart the Samba service (sudo systemctl restart smbd) after making changes to the configuration file.

    Authentication Issues:
        Error: Users are unable to authenticate or log in to access Samba shares.
        Resolution:
            Confirm that Samba users are correctly added using smbpasswd and have the appropriate permissions.
            Check if there are synchronization issues between Samba users and Linux users.
            Ensure that the user passwords set for Samba are in sync with system passwords.

    Network Connectivity Problems:
        Error: Samba shares are not accessible from remote locations or specific devices.
        Resolution:
            Verify network connectivity between the server and the client devices.
            Check router/firewall settings to ensure port forwarding or proper network configurations.
            Test accessing shares using both IP addresses and hostnames.

    Logging and Debugging:
        Error: Unclear issues without specific error messages.
        Resolution:
            Enable Samba logging in the smb.conf file to gather detailed error information (log file = /path/to/log).
            Review the Samba logs (/var/log/samba/) for error messages and clues to diagnose the issue.




F. Maintenance and Upgrades

    Software Updates: Describe the process for updating Samba to ensure it's running the latest version.
        Regularly updating Samba through package managers to patch security vulnerabilities or add new features.

    Monitoring Samba: Explain how to monitor the performance and health of the Samba server, such as checking CPU and memory usage.
        Using monitoring tools like sar or top to track server performance.

G. Troubleshooting

    Logs and Diagnostics: Guide on how to access and interpret Samba logs for troubleshooting purposes.
        Checking log files for error messages or warnings to diagnose issues.

    Common Samba Issues: Provide solutions to common issues related to Samba functionality.
        Troubleshooting network connectivity problems, permission mismatches, or authentication failures.

H. Integration with Other Services

    LDAP or Active Directory Integration: Document integration with LDAP or Active Directory if applicable.
        Configuring Samba to authenticate users against an Active Directory server.






III. Conclusion



Summarize the key points covered in the documentation and provide additional notes or considerations for a successful Samba server setup in a small office environment.


Conclusion: Setting Up Samba for Small Office File Sharing

In conclusion, the implementation of a Samba server within a small office network offers a robust and versatile solution for seamless file sharing across diverse operating systems. Throughout this documentation, key aspects have been highlighted to ensure an effective and secure setup:

Integration and Purpose: The primary purpose of the Samba server is to act as a unified platform for file sharing, allowing users on various operating systems to access shared resources. Its integration into the existing Linux server environment enhances collaboration and productivity.

Configuration and Maintenance:

    Installation and Configuration: Detailed steps have been provided for the installation and configuration of Samba, emphasizing the creation of shared directories, permissions, and user authentication.
    Security Measures: Guidance on firewall configuration, encryption, and access controls ensures a secure environment for data transmission and user access.

User Management and Troubleshooting:

    User Authentication: Documenting the creation and synchronization of user accounts between Samba and Linux users ensures seamless access to shared resources.
    Error Handling and Troubleshooting: Guidelines for troubleshooting common issues such as connection errors, permission mismatches, and misconfigured settings have been outlined to maintain uninterrupted file sharing capabilities.

Maintenance and Updates:

    Software Updates: The process for updating Samba through package managers has been detailed to consistently patch vulnerabilities and introduce new features, ensuring the server's security and performance.
    Monitoring and Maintenance: Regular monitoring of Samba's performance and health has been emphasized, allowing for proactive maintenance and swift resolution of potential issues.

Additional Considerations:

    Scalability: The Samba setup can be scaled as the office grows, accommodating new users and additional resources with ease.
    Backup and Testing: Implementation of backups and periodic testing of updates on non-production systems mitigate risks associated with updates or configuration changes.

Recommendations:

For an optimal Samba server setup:

    Constant review and update the server's security measures, setting firewall rules and encryption protocols.
    Implement user training to ensure efficient utilization of file-sharing capabilities.
    Regular backup schedule and conduct periodic testing to maintain data integrity and system reliability.

A well-configured, structured and regularly maintained Samba server provides a stable and secure foundation for file sharing within a small office environment, fostering collaboration and improved productivity across diverse operating systems.

 
